<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/author/akas/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2019-09-24T07:46:02+00:00</updated>
  <id>/author/akas/feed.xml</id>

  
  
  

  
    <title type="html">Akas Blog | </title>
  

  
    <subtitle>The machine learning enginner</subtitle>
  

  

  
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">Git Workflow</title>
      <link href="/git" rel="alternate" type="text/html" title="Git Workflow" />
      <published>2019-09-19T09:00:00+00:00</published>
      <updated>2019-09-19T09:00:00+00:00</updated>
      <id>/git</id>
      <content type="html" xml:base="/git">&lt;h1 id=&quot;svn과-git-차이점-요약&quot;&gt;SVN과 Git 차이점 요약&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;저장소의 위치가 다르며, 로컬 저장소가 존재한다.(분산 처리, 안전성, 빠른 속도)&lt;/li&gt;
  &lt;li&gt;커밋 이전에 스테이지 영역에 추가하는 과정이 존재(커밋 대상의 분리)&lt;/li&gt;
  &lt;li&gt;각각의 버전을 스냅샷으로 저장&lt;/li&gt;
  &lt;li&gt;스냅샷이 존재하기 때문에 브랜치도 자유롭게 생성 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;git의-주요-명령어-정리&quot;&gt;Git의 주요 명령어 정리&lt;/h1&gt;

&lt;h2 id=&quot;새로운-저장소-만들기&quot;&gt;새로운 저장소 만들기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;폴더를 만들고 그 안에서 새로운 git 저장소(.git)를 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;변경내용-확정하기&quot;&gt;변경내용 확정하기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;스테이징(Staging) 영역에 추가 된 변경 내용을 확정하기 위해, Commit 명령어를 이용&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;DESCRIPTION&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;변경-내용-발행하기&quot;&gt;변경 내용 발행하기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;원격 저장소에 변경 내용을 올리는 방법&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;기존의 remote가 아닌, 원격 저장소의 주소를 바꿔서 발행하기&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git remote add origin &amp;lt;원격서버주소&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;저장소-받아오기&quot;&gt;저장소 받아오기&lt;/h1&gt;
&lt;h2 id=&quot;로컬-저장소local-repository에-복제하기&quot;&gt;로컬 저장소(Local repository)에 복제하기&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone &lt;span class=&quot;s2&quot;&gt;&quot;/path&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;원격-서버의-저장소를-복제하기&quot;&gt;원격 서버의 저장소를 복제하기&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone 사용자명@호스트:/원격/저장소/경로&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;브랜치-관리하기&quot;&gt;브랜치 관리하기&lt;/h2&gt;

&lt;h3 id=&quot;브랜치-만들기&quot;&gt;브랜치 만들기&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;develop이라는 이름의 브랜치를 생성한 후, 해당 디렉토리로 이동&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; develop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;다시 Master로 돌아오기&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;갱신하고-병합하기&quot;&gt;갱신하고 병합하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;로컬 저장소를 원격 저장소에 맞추어서 업데이트 및 갱신하기&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git pull&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;다른 브랜치의 변경 내용을 현재 브랜치에 병합하기 (현재 Branch 폴더 내에서 명령어를 수행)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git merge &amp;lt;Branch 이름&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;브랜치-삭제-및-원격-저장소-전송&quot;&gt;브랜치 삭제 및 원격 저장소 전송&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;develop 브랜치를 삭제하기&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; develop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;원격 저장소로 브랜치 전송하기&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git push origin develop&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;변경-내용-되돌리기&quot;&gt;변경 내용 되돌리기.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;한 단계 전 상태로 돌아가기&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reset HEAD~1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;해당 커밋을 되돌리는 커밋을 새로 생성하기&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git revert&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;해당 정리는 Aria(In Suk) Kim님의 Git-Workflow를 참고하여, 작성한 포스트입니다.
참조 url : https://www.slideshare.net/shoo7830/gitworkflow-170728162&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Akas</name>
        
        
      </author>

      

      
        <category term="CI" />
      

      
        <summary type="html">SVN과 Git 차이점 요약 저장소의 위치가 다르며, 로컬 저장소가 존재한다.(분산 처리, 안전성, 빠른 속도) 커밋 이전에 스테이지 영역에 추가하는 과정이 존재(커밋 대상의 분리) 각각의 버전을 스냅샷으로 저장 스냅샷이 존재하기 때문에 브랜치도 자유롭게 생성 가능</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">JAVA의 다형성(Polymorphism)과 동적바인딩</title>
      <link href="/Polymorphism_Dynamic_Binding" rel="alternate" type="text/html" title="JAVA의 다형성(Polymorphism)과 동적바인딩" />
      <published>2019-09-17T09:00:00+00:00</published>
      <updated>2019-09-17T09:00:00+00:00</updated>
      <id>/Polymorphism_Dynamic_Binding</id>
      <content type="html" xml:base="/Polymorphism_Dynamic_Binding">&lt;h1 id=&quot;다형성&quot;&gt;다형성&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;“객체지향”에는 4가지 중요한 개념이 있다. 추상화, 캡슐화, 상송 그리고 다형성이다.&lt;/li&gt;
  &lt;li&gt;아래의 코드를 통해, 다형성 및 동적 바인딩의 개념을 살펴보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Polymorphism&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Person&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Student&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;참조 변수 student는 Person 객체를 참조하고 있다. 따라서, Person 내의 show() 메소드가 호출이 되어야하지만, 동적바인딩을 통해 런타임 시점에 객체 타입을 기준으로 실행될 함수를 호출한다.
즉 실행되는 시점에서는  Student 객체가 생성되어, 해당 객체의 show() 함수를 호출한다.&lt;/p&gt;

&lt;p&gt;정리하자면, 다형성이 적용될 때, 참조 변수 student는 컴파일 시점과 런타임 시점에서 참조하는 함수가 다른 것이다.&lt;/p&gt;

&lt;p&gt;게시글 참조 : https://brunch.co.kr/@mystoryg/60&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Akas</name>
        
        
      </author>

      

      
        <category term="Java" />
      

      
        <summary type="html">다형성 “객체지향”에는 4가지 중요한 개념이 있다. 추상화, 캡슐화, 상송 그리고 다형성이다. 아래의 코드를 통해, 다형성 및 동적 바인딩의 개념을 살펴보자.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">/etc/hosts 설정</title>
      <link href="/Linux-hosts" rel="alternate" type="text/html" title="/etc/hosts 설정" />
      <published>2019-09-11T09:00:00+00:00</published>
      <updated>2019-09-11T09:00:00+00:00</updated>
      <id>/Linux-hosts</id>
      <content type="html" xml:base="/Linux-hosts">&lt;h1 id=&quot;호스트-파일-설정&quot;&gt;호스트 파일 설정&lt;/h1&gt;
&lt;h2 id=&quot;hosts-파일-소개&quot;&gt;hosts 파일 소개&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;/etc/hosts 파일에 리눅스 로컬네임서버 설정을 할 수 있다.&lt;/li&gt;
  &lt;li&gt;리눅스에서 hosts의 내용은 DNS(Domain Name Server)보다 먼저 탐색되어, 호스트명을 IP 주소로 풀어서 해석한다.&lt;/li&gt;
  &lt;li&gt;“NAVER” 서비스를 이용할 때, “NAVER”의 IP 주소를 입력하는 것이 아니라, 도메인명을 활용하여 서비스를 이용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;호스트hosts-설정&quot;&gt;호스트(hosts) 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;/etc/hosts 파일을 편집한다.&lt;/li&gt;
  &lt;li&gt;각 서버들의 IP 주소 및 도메인명과 Alias 등의 정보를 넣어준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# hosts 설정 방법&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@admin ~]# vi /etc/hosts
101.101.101.101 test1.도메인명.com test1 &lt;span class=&quot;c&quot;&gt;# IP주소 도메인명 Alias(도메인의 별칭) 순으로 입력&lt;/span&gt;
101.101.101.102 test2.도메인명.com test2
101.101.101.103 test3.도메인명.com test3
101.101.101.104 test4.도메인명.com test4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 도메인명으로 PING TEST&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@admin ~]# ping test1.도메인명.com
PING test1.도메인명.com &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;101.101.101.101&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 4&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.

&lt;span class=&quot;c&quot;&gt;# ALIAS로 PING TEST&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@admin ~]# ping test1
PING test1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;101.101.101.101&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;호스트명-변경&quot;&gt;호스트명 변경&lt;/h2&gt;
&lt;h3 id=&quot;hostnamectl-명령어를-활용하는-방법&quot;&gt;hostnamectl 명령어를 활용하는 방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Network hostname을 test.domainName.com으로 설정&lt;/li&gt;
  &lt;li&gt;Home 디렉토리에서 작업을 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@admin ~]# &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hostnamectl set-hostname test.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 변경 된 호스트명을 확인할 수 있다.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@admin ~]# hostname&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 출력 결과&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@admin ~]# test1.도메인명.com&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;shell-script를-활용하여-호스트-이름을-변경하는-방법&quot;&gt;Shell script를 활용하여, 호스트 이름을 변경하는 방법&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;bash 파일을 활용하여, 전체 서버에 명령어를 전달하려고 한다. change_hosts_name.sh 이름의 bash 파일을 생성해보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# bash 파일을 실행하여, 리눅스 터널링을 수행할 것이다.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@admin ~]# vi change_hosts_name.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;host 안에는 hostname 목록들이 존재하며, 아래의 내용을 change_hosts_name.sh 파일에 넣어줌으로써, bash 파일을 수정해준다.&lt;/li&gt;
  &lt;li&gt;내용 수정이 끝난 후에는 vi 명령어를 통해 쓰기 후 저장을 한다.(ESC키 → :wq 입력 후 엔터키로 빠져나온다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;host &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;hosts&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;portNumber&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;userName&quot;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'@'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hostnamectl set-hostname &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;bash 파일을 실행해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@admin ~]# sh ./change_hosts_name.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content>

      
      
      
      
      

      <author>
          <name>Akas</name>
        
        
      </author>

      

      
        <category term="Linux" />
      

      
        <summary type="html">호스트 파일 설정 hosts 파일 소개 /etc/hosts 파일에 리눅스 로컬네임서버 설정을 할 수 있다. 리눅스에서 hosts의 내용은 DNS(Domain Name Server)보다 먼저 탐색되어, 호스트명을 IP 주소로 풀어서 해석한다. “NAVER” 서비스를 이용할 때, “NAVER”의 IP 주소를 입력하는 것이 아니라, 도메인명을 활용하여 서비스를 이용한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Stack 과 Queue 정리</title>
      <link href="/Stack_Queue" rel="alternate" type="text/html" title="Stack 과 Queue 정리" />
      <published>2019-09-11T09:00:00+00:00</published>
      <updated>2019-09-11T09:00:00+00:00</updated>
      <id>/Stack_Queue</id>
      <content type="html" xml:base="/Stack_Queue">&lt;h1 id=&quot;stack&quot;&gt;Stack&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;한 쪽 끝에서만 자료를 넣고 뺄 수 있는 자료 구조.&lt;/li&gt;
  &lt;li&gt;마지막으로 넣은 것이 가장 먼저 나오기 때문에 Last In First Out (LIFO) 라고 한다.&lt;/li&gt;
  &lt;li&gt;“스택”에서 데이터가 들어가고 나가는 곳을 “한 지점”에 고정을 시켜놓고, 명령어를 수행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stack-명령어-정리&quot;&gt;Stack 명령어 정리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;push : 스택에 자료를 넣는 연산&lt;/li&gt;
  &lt;li&gt;pop : 스택에 자료를 빼는 연산&lt;/li&gt;
  &lt;li&gt;top : 스택의 가장 위에 있는 자료를 보는 연산&lt;/li&gt;
  &lt;li&gt;empty : 스택이 비어있는지 아닌지를 알아보는 연산&lt;/li&gt;
  &lt;li&gt;size : 스택에 저장되어 있는 자료의 개수를 알아보는 연산&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;대표-문제-유형&quot;&gt;대표 문제 유형&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;괄호 문제(짝 맞추기 문제)&lt;/li&gt;
  &lt;li&gt;스택 수열&lt;/li&gt;
  &lt;li&gt;단어 뒤집기&lt;/li&gt;
  &lt;li&gt;에디터 문제&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;queue&quot;&gt;Queue&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;한 쪽 끝에서만 자료를 넣고, 다른 한 쪽 끝에서만 뺄 수 있는 자료 구조&lt;/li&gt;
  &lt;li&gt;먼저 넣은 것이 가장 먼저 나오기 때문에 First In First Out(FIFO) 라고 한다.&lt;/li&gt;
  &lt;li&gt;삭제 연산은 Begin 쪽에, 삽입 연산은 End 쪽에서 이루어진다.&lt;/li&gt;
  &lt;li&gt;C++의 경우에는 STL의 queue를 사용하고, Java의 경우에는 java.util.Queue를 사용하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;queue-명령어-정리&quot;&gt;Queue 명령어 정리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;push : 큐에 자료를 넣는 연산&lt;/li&gt;
  &lt;li&gt;pop : 큐에서 자료를 빼는 연산&lt;/li&gt;
  &lt;li&gt;front : 큐의 가장 앞에 있는 자료를 보는 연산&lt;/li&gt;
  &lt;li&gt;back : 큐의 가장 뒤에 있는 자료를 보는 연산&lt;/li&gt;
  &lt;li&gt;empty : 큐가 비어있는지 아닌지를 알아보는 연산&lt;/li&gt;
  &lt;li&gt;size : 큐에 저장되어있는 자료의 개수를 알아보는 연산&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;대표-문제-유형-1&quot;&gt;대표 문제 유형&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;조세퍼스 문제&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;deque-덱&quot;&gt;Deque (덱)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;양 끝에서만 자료를 넣고 양 끝에서 뺄 수 있는 자료구조&lt;/li&gt;
  &lt;li&gt;Double-ended queue의 약자&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deque-명령어-정리&quot;&gt;Deque 명령어 정리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;push_front : 큐에 자료를 넣는 연산&lt;/li&gt;
  &lt;li&gt;pop : 큐에서 자료를 넣는 연산&lt;/li&gt;
  &lt;li&gt;front : 큐의 가장 앞에 있는 자료를 보는 연산&lt;/li&gt;
  &lt;li&gt;back : 큐의 가장 뒤에 있는 자료를 보는 연산&lt;/li&gt;
  &lt;li&gt;empty : 큐가 비어있는지 아닌지를 알아보는 연산&lt;/li&gt;
  &lt;li&gt;size : 큐에 저장되어 있는 자료의 개수를 알아보는 연산&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Akas</name>
        
        
      </author>

      

      
        <category term="DS" />
      

      
        <summary type="html">Stack 한 쪽 끝에서만 자료를 넣고 뺄 수 있는 자료 구조. 마지막으로 넣은 것이 가장 먼저 나오기 때문에 Last In First Out (LIFO) 라고 한다. “스택”에서 데이터가 들어가고 나가는 곳을 “한 지점”에 고정을 시켜놓고, 명령어를 수행한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">JAVA의 length, length(), size 비교</title>
      <link href="/Size_Length" rel="alternate" type="text/html" title="JAVA의 length, length(), size 비교" />
      <published>2019-09-11T09:00:00+00:00</published>
      <updated>2019-09-11T09:00:00+00:00</updated>
      <id>/Size_Length</id>
      <content type="html" xml:base="/Size_Length">&lt;h1 id=&quot;java의-length-length-size-사용-및-비교&quot;&gt;JAVA의 LENGTH, LENGTH(), SIZE 사용 및 비교&lt;/h1&gt;

&lt;h2 id=&quot;length&quot;&gt;length&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;arrays (int[], double[], String[]) : 배열의 길이를 알려 할때 사용한다.&lt;/li&gt;
  &lt;li&gt;메소드가 아니므로, Object로 사용하지 않는다. 따라서 오직 배열에서만 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;length-1&quot;&gt;length()&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;String related Object (String, StringBuilder etc) : 이것은 문자열의 길이를 알고자 할때 사용된다.&lt;/li&gt;
  &lt;li&gt;스트링은 배열이 아니므로, .length를 사용할 수 없으며, 컬렉션 또한 아니기 때문에, .size() 도 사용할 수 없다. 이를 위해 length()가 설계되었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;size&quot;&gt;size()&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Collection Object (ArrayList, Set etc) : 컬렉션 타입의 길이를 확인할때 사용된다.&lt;/li&gt;
  &lt;li&gt;메소드이므로, Collection에 사용될 수 있다.&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>Akas</name>
        
        
      </author>

      

      
        <category term="JAVA" />
      

      
        <summary type="html">JAVA의 LENGTH, LENGTH(), SIZE 사용 및 비교</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">JVM 정리</title>
      <link href="/JVM" rel="alternate" type="text/html" title="JVM 정리" />
      <published>2019-08-21T10:18:00+00:00</published>
      <updated>2019-08-21T10:18:00+00:00</updated>
      <id>/JVM</id>
      <content type="html" xml:base="/JVM">&lt;p&gt;개발을 하는 과정에서 자바를 써왔었지만, 자바가 실행되는 원리와 구조에 대해서는 기초 지식이 부족하여, 이를 아래와 같이 정리하려 한다.&lt;/p&gt;

&lt;p&gt;##JVM이란&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자바를 실행하기 위한 가상 컴퓨터&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jvm을-사용하는-이유&quot;&gt;JVM을 사용하는 이유?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자바의 특징은 운영체제, 즉 시스템에 독립적이다. JVM이 자바를 실행하기 위한 역할을 하기 때문에 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자바 프로그램은 완전한 기계어가 아닌, 중간 단계의 바이트 코드이므로, 이를 해석하고 실행할 수 있는 가상의 운영체제가 필요하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JAVA 어플리케이션은 JVM과 상호작용하기 때문에, OS와 시스템에 독립적이라 다른 OS에서도 실행이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바이트 코드는 모든 JVM에서 동일한 실행 결과가 나타나지만, JVM은 OS에 종속적이기 때문에 해당 OS에서 실행가능한 JVM을 설치해야한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jdk-java-development-kit-자바-개발-도구&quot;&gt;JDK (Java Development Kit, 자바 개발 도구)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;개발에 필요한 실행 파일(javac, 기타) + JRE(Java Runtime Environment, JVM과 Java API를 담고 있음)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;javac (Java compiler) : 자바소스코드를 바이트코드로 컴파일 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;java는 자바 인터프리터(Interpreter)는 컴파일러가 생성한 바이트코드를 실행하는 프로그램이다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보통 인터프리터는 고급 언어로 작성 된 원시코드 명령어들을 한번에 한 줄씩 읽어들여서 실행하는 프로그램이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;고급 언어로 작성 된 프로그램들을 실행하는데는 2가지 방법이 존재한다.
    &lt;ul&gt;
      &lt;li&gt;가장 일반적인 방법은 프로그램을 컴파일 작업을 통해, 기계어 또는 바이트 코드로 번역함으로써, 컴퓨터가 실행할 수 있는 코드로 만들어주는 것이다.&lt;/li&gt;
      &lt;li&gt;다른 하나는 프로그램을 인터프리터에 통과시킴으로써, 고급 명령어들을 중간 형태로 번역하여, 이를 실행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jar는 압축 프로그램으로 클래스 파일과 프로그램의 실행과 관련된 파일을 하나의 jar파일로 압축시켜 놓는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jvm이-자바-프로그램을-실행하는-과정&quot;&gt;JVM이 자바 프로그램을 실행하는 과정&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;자바 파일을 자바 컴파일로 컴파일을 수행한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자바 인터프리터는 프로그램의 실행에 필요한 클래스 (클래스 파일)을 로드한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스 파일을 검사한다. (파일의 내부구조와 코드)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지정된 클래스에서 main method를 호출한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jvm의-내부-구조&quot;&gt;JVM의 내부 구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/JVM1.JPG&quot; alt=&quot;JVM 구조&quot; title=&quot;JVM 구조&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;출처&quot;&gt;출처&lt;/h1&gt;</content>

      
      
      
      
      

      <author>
          <name>Akas</name>
        
        
      </author>

      

      
        <category term="JAVA" />
      

      
        <summary type="html">개발을 하는 과정에서 자바를 써왔었지만, 자바가 실행되는 원리와 구조에 대해서는 기초 지식이 부족하여, 이를 아래와 같이 정리하려 한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Array와 LinkedList 정의 및 비교</title>
      <link href="/Array-Vesus-LinkedList" rel="alternate" type="text/html" title="Array와 LinkedList 정의 및 비교" />
      <published>2019-08-14T10:18:00+00:00</published>
      <updated>2019-08-14T10:18:00+00:00</updated>
      <id>/Array%20Vesus%20LinkedList</id>
      <content type="html" xml:base="/Array-Vesus-LinkedList">&lt;h2 id=&quot;array&quot;&gt;Array&lt;/h2&gt;
&lt;p&gt;Array(배열)은 논리적 저장 순서와 물리적 저장 순서가 일치한다. 따라서 인덱스(index)를 활용하여, 특정 원소(element)로 접근할 수 있다. 따라서 찾고자 하는 원소의 인덱스 값을 알고 있으면 Big-O(1)에 해당 원소로 접근할 수 있다. 즉, Random Access가 가능하다는 장점이 존재한다.&lt;/p&gt;

&lt;p&gt;하지만 삭제(Delete) 또는 삽입(Insert)의 작업을 수행할 때, 특정 원소에 접근하여 작업을 완료한 뒤(O(1)), 한 가지 작업을 추가적으로 수행해야한다. 만약 배열의 원소 중 어느 원소를 삭제했다고 했을 때, 배열의 연속적인 특징이 깨지게 된다. 즉 빈 공간이 생기는 것이다. 따라서 삭제한 원소보다 큰 인덱스를 갖는 원소들을 왼쪽 또는 오른쪽으로 이동(shift)해야 하는 비용(cost)이 발생하고 이 경우의 시간 복잡도는 O(n)가 된다. 그렇기 때문에 Array에서 삭제 작업으로 발생되는 time complexity의 worst case 는 O(n)이 된다.&lt;/p&gt;

&lt;p&gt;삽입의 경우도 마찬가지이다. 만약 첫번째 자리에 새로운 원소를 추가하고자 할 때, 나머지 원소들의 인덱스를 1 만큼 오른쪽으로 shift 작업이 필요하므로, 이 경우도 O(n)의 시간이 걸린다.&lt;/p&gt;

&lt;h2 id=&quot;arraylist-vs-linkedlist&quot;&gt;ArrayList VS LinkedList&lt;/h2&gt;
&lt;p&gt;ArrayList는 데이터들이 순서대로 쭉 늘어선 배열의 형식을 취하고 있다. ArrayList는 사이즈가 고정되어 있기 때문에 사입 시 사이즈를 늘려주는 연산이 추가되어야 하고, 삭제 시에는 순차적인 인덱스 구조로 인해, 삭제 된 빈 인덱스를 채워야하는 연산이 추가되어야 한다. 따라서, 삽입 및 삭제가 빈번하게 발생하는 프로레스의 경우 시스템의 성능 저하를 일으키는 원인이 된다. 또한 자료들이 지속적으로 삭제되는 과정에서 ArrayList에서는 그 공간만큼 낭비되는 메모리가 많아지게 된다.&lt;/p&gt;

&lt;p&gt;LinkedList는 각각의 원소(element)들이 서로 자료의 주소 값으로 연결되어 있는 구조이다. 따라서 몇 개의 참조자만 다른 값으로 변경한다면, 삭제와 삽입을 O(1)에 해결 할 수 있다. LinkedLisst는 ArrayList에서 발생하는 문제를 연결 형태(Linked)로 해결하여, ArrayList에서 뒤로 밀거나 채우는 작업 없이 단지 주소만 서로 연결시켜 준다면, 추가 및 삭제가 ArrayList보다 빠르고 용이하다. 따라서 삽입 및 삭제가 빈번하게 발생하는 프로세스의 경우에는 LinkedList를 사용하여, 시스템을 구현하는 것이 바람직하다.&lt;/p&gt;

&lt;p&gt;LinkedList도 단점이 존재한다. ArrayList는 무작위 접근(Random Access)가 가능하지만, LinkedList에서는 순차접근(Sequential Access)만이 가능하다. 특히 LinkedList는 단방향성을 갖고 있기 때문에 인덱스를 이용하여, 자료를 검색하는 어플리케이션에는 적합하지가 않다.&lt;/p&gt;

&lt;p&gt;사실 순차 접근도 참조의 지역성(locality of reference: 한번 참조한 데이터는 다시 참조될 가능성이 높고 참조된 데이터 주변의 데이터 역시 같이 참조될 가능성이 높다는 이론입니다.) 때문에 LinkedList 보다는 ArrayList가 훨씬 빠릅니다. n개의 자료를 저장할 때, ArrayList는 자료들을 하나의 연속적인 묶음으로 묶어 자료를 저장하는 반면, LinkedList는 자료들을 저장 공간에 불연속적인 단위로 저장하게 됩니다. 그렇기 때문에 LinkedList는 메모리 이곳저곳에 산재해 저장되어 있는 노드들을 접근하는데 ArrayList보다는 긴 지연 시간이 소모됩니다. LinkedList의 또 다른 단점은 참조자를 위해 추가적인 메모리를 할당해야 하는 점입니다. 자료들의 크기가 작은 리스트의 경우 참조자를 위한 추가적인 메모리할당은 비실용적일 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;h2 id=&quot;table&quot;&gt;LinkedList의 장/단점&lt;/h2&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;center&gt;장점&amp;lt;/th&amp;gt;
&lt;th&gt;&lt;center&gt;단점&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;tr&gt;
&lt;td&gt;자료의 삽입과 삭제가 용이하다.&lt;/td&gt;
&lt;td&gt;포인터의 사용으로 인해 저장 공간의 낭비가 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;리스트 내에서 자료의 이동이 필요하지 않다.&lt;/td&gt;
&lt;td&gt;알고리즘이 복잡하다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;사용 후 기억 장소의 재사용이 가능하다.&lt;/td&gt;
&lt;td&gt;특정 자료의 탐색 시간이 많이 소요된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;연속적인 기억 장소의 할당이 필요하지 않다.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&lt;hr /&gt;
&lt;/center&gt;&lt;/th&gt;&lt;/center&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</content>

      
      
      
      
      

      <author>
          <name>Akas</name>
        
        
      </author>

      

      
        <category term="DS" />
      

      
        <summary type="html">Array Array(배열)은 논리적 저장 순서와 물리적 저장 순서가 일치한다. 따라서 인덱스(index)를 활용하여, 특정 원소(element)로 접근할 수 있다. 따라서 찾고자 하는 원소의 인덱스 값을 알고 있으면 Big-O(1)에 해당 원소로 접근할 수 있다. 즉, Random Access가 가능하다는 장점이 존재한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">호스트(host) 파일 설정</title>
      <link href="/Set-Host_txt" rel="alternate" type="text/html" title="호스트(host) 파일 설정" />
      <published>2019-07-25T10:18:00+00:00</published>
      <updated>2019-07-25T10:18:00+00:00</updated>
      <id>/Set%20Host_txt</id>
      <content type="html" xml:base="/Set-Host_txt">&lt;h2 id=&quot;hosts-파일-소개&quot;&gt;hosts 파일 소개&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;CentOS 7에서 DNS(Domain Name Server)보다 먼저 IP주소와 Hostname 또는 Domain 명을 Mapping하는 역할을 한다.&lt;/li&gt;
  &lt;li&gt;작은 네트워크에서는 DNS를 대신하도록 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hosts-설정&quot;&gt;hosts 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Home 디렉토리에서 작업&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vi /etc/hosts&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content>

      
      
      
      
      

      <author>
          <name>Akas</name>
        
        
      </author>

      

      
        <category term="Linux" />
      

      
        <summary type="html">hosts 파일 소개 CentOS 7에서 DNS(Domain Name Server)보다 먼저 IP주소와 Hostname 또는 Domain 명을 Mapping하는 역할을 한다. 작은 네트워크에서는 DNS를 대신하도록 설정할 수 있다.</summary>
      

      
      
    </entry>
  
</feed>
