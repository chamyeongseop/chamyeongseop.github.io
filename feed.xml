<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-09-11T00:29:06+00:00</updated><id>/</id><title type="html">Akas Blog</title><subtitle>The machine learning enginner</subtitle><entry><title type="html">JVM 정리</title><link href="/JVM" rel="alternate" type="text/html" title="JVM 정리" /><published>2019-08-21T10:18:00+00:00</published><updated>2019-08-21T10:18:00+00:00</updated><id>/JVM</id><content type="html" xml:base="/JVM">&lt;p&gt;개발을 하는 과정에서 자바를 써왔었지만, 자바가 실행되는 원리와 구조에 대해서는 기초 지식이 부족하여, 이를 아래와 같이 정리하려 한다.&lt;/p&gt;

&lt;p&gt;##JVM이란&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;자바를 실행하기 위한 가상 컴퓨터&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jvm을-사용하는-이유&quot;&gt;JVM을 사용하는 이유?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;자바의 특징은 운영체제, 즉 시스템에 독립적이다. JVM이 자바를 실행하기 위한 역할을 하기 때문에 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자바 프로그램은 완전한 기계어가 아닌, 중간 단계의 바이트 코드이므로, 이를 해석하고 실행할 수 있는 가상의 운영체제가 필요하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JAVA 어플리케이션은 JVM과 상호작용하기 때문에, OS와 시스템에 독립적이라 다른 OS에서도 실행이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바이트 코드는 모든 JVM에서 동일한 실행 결과가 나타나지만, JVM은 OS에 종속적이기 때문에 해당 OS에서 실행가능한 JVM을 설치해야한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jdk-java-development-kit-자바-개발-도구&quot;&gt;JDK (Java Development Kit, 자바 개발 도구)&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;개발에 필요한 실행 파일(javac, 기타) + JRE(Java Runtime Environment, JVM과 Java API를 담고 있음)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;javac (Java compiler) : 자바소스코드를 바이트코드로 컴파일 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;java는 자바 인터프리터(Interpreter)는 컴파일러가 생성한 바이트코드를 실행하는 프로그램이다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보통 인터프리터는 고급 언어로 작성 된 원시코드 명령어들을 한번에 한 줄씩 읽어들여서 실행하는 프로그램이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;고급 언어로 작성 된 프로그램들을 실행하는데는 2가지 방법이 존재한다.
    &lt;ul&gt;
      &lt;li&gt;가장 일반적인 방법은 프로그램을 컴파일 작업을 통해, 기계어 또는 바이트 코드로 번역함으로써, 컴퓨터가 실행할 수 있는 코드로 만들어주는 것이다.&lt;/li&gt;
      &lt;li&gt;다른 하나는 프로그램을 인터프리터에 통과시킴으로써, 고급 명령어들을 중간 형태로 번역하여, 이를 실행한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;jar는 압축 프로그램으로 클래스 파일과 프로그램의 실행과 관련된 파일을 하나의 jar파일로 압축시켜 놓는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jvm이-자바-프로그램을-실행하는-과정&quot;&gt;JVM이 자바 프로그램을 실행하는 과정&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;자바 파일을 자바 컴파일로 컴파일을 수행한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;자바 인터프리터는 프로그램의 실행에 필요한 클래스 (클래스 파일)을 로드한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클래스 파일을 검사한다. (파일의 내부구조와 코드)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;지정된 클래스에서 main method를 호출한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;jvm의-내부-구조&quot;&gt;JVM의 내부 구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/JVM1.JPG&quot; alt=&quot;JVM 구조&quot; title=&quot;JVM 구조&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;출처&quot;&gt;출처&lt;/h1&gt;</content><author><name>Akas</name></author><category term="JAVA" /><summary type="html">개발을 하는 과정에서 자바를 써왔었지만, 자바가 실행되는 원리와 구조에 대해서는 기초 지식이 부족하여, 이를 아래와 같이 정리하려 한다.</summary></entry><entry><title type="html">Array와 LinkedList 정의 및 비교</title><link href="/Array-Vesus-LinkedList" rel="alternate" type="text/html" title="Array와 LinkedList 정의 및 비교" /><published>2019-08-14T10:18:00+00:00</published><updated>2019-08-14T10:18:00+00:00</updated><id>/Array%20Vesus%20LinkedList</id><content type="html" xml:base="/Array-Vesus-LinkedList">&lt;h2 id=&quot;array&quot;&gt;Array&lt;/h2&gt;
&lt;p&gt;Array(배열)은 논리적 저장 순서와 물리적 저장 순서가 일치한다. 따라서 인덱스(index)를 활용하여, 특정 원소(element)로 접근할 수 있다. 따라서 찾고자 하는 원소의 인덱스 값을 알고 있으면 Big-O(1)에 해당 원소로 접근할 수 있다. 즉, Random Access가 가능하다는 장점이 존재한다.&lt;/p&gt;

&lt;p&gt;하지만 삭제(Delete) 또는 삽입(Insert)의 작업을 수행할 때, 특정 원소에 접근하여 작업을 완료한 뒤(O(1)), 한 가지 작업을 추가적으로 수행해야한다. 만약 배열의 원소 중 어느 원소를 삭제했다고 했을 때, 배열의 연속적인 특징이 깨지게 된다. 즉 빈 공간이 생기는 것이다. 따라서 삭제한 원소보다 큰 인덱스를 갖는 원소들을 왼쪽 또는 오른쪽으로 이동(shift)해야 하는 비용(cost)이 발생하고 이 경우의 시간 복잡도는 O(n)가 된다. 그렇기 때문에 Array에서 삭제 작업으로 발생되는 time complexity의 worst case 는 O(n)이 된다.&lt;/p&gt;

&lt;p&gt;삽입의 경우도 마찬가지이다. 만약 첫번째 자리에 새로운 원소를 추가하고자 할 때, 나머지 원소들의 인덱스를 1 만큼 오른쪽으로 shift 작업이 필요하므로, 이 경우도 O(n)의 시간이 걸린다.&lt;/p&gt;

&lt;h2 id=&quot;arraylist-vs-linkedlist&quot;&gt;ArrayList VS LinkedList&lt;/h2&gt;
&lt;p&gt;ArrayList는 데이터들이 순서대로 쭉 늘어선 배열의 형식을 취하고 있다. ArrayList는 사이즈가 고정되어 있기 때문에 사입 시 사이즈를 늘려주는 연산이 추가되어야 하고, 삭제 시에는 순차적인 인덱스 구조로 인해, 삭제 된 빈 인덱스를 채워야하는 연산이 추가되어야 한다. 따라서, 삽입 및 삭제가 빈번하게 발생하는 프로레스의 경우 시스템의 성능 저하를 일으키는 원인이 된다. 또한 자료들이 지속적으로 삭제되는 과정에서 ArrayList에서는 그 공간만큼 낭비되는 메모리가 많아지게 된다.&lt;/p&gt;

&lt;p&gt;LinkedList는 각각의 원소(element)들이 서로 자료의 주소 값으로 연결되어 있는 구조이다. 따라서 몇 개의 참조자만 다른 값으로 변경한다면, 삭제와 삽입을 O(1)에 해결 할 수 있다. LinkedLisst는 ArrayList에서 발생하는 문제를 연결 형태(Linked)로 해결하여, ArrayList에서 뒤로 밀거나 채우는 작업 없이 단지 주소만 서로 연결시켜 준다면, 추가 및 삭제가 ArrayList보다 빠르고 용이하다. 따라서 삽입 및 삭제가 빈번하게 발생하는 프로세스의 경우에는 LinkedList를 사용하여, 시스템을 구현하는 것이 바람직하다.&lt;/p&gt;

&lt;p&gt;LinkedList도 단점이 존재한다. ArrayList는 무작위 접근(Random Access)가 가능하지만, LinkedList에서는 순차접근(Sequential Access)만이 가능하다. 특히 LinkedList는 단방향성을 갖고 있기 때문에 인덱스를 이용하여, 자료를 검색하는 어플리케이션에는 적합하지가 않다.&lt;/p&gt;

&lt;p&gt;사실 순차 접근도 참조의 지역성(locality of reference: 한번 참조한 데이터는 다시 참조될 가능성이 높고 참조된 데이터 주변의 데이터 역시 같이 참조될 가능성이 높다는 이론입니다.) 때문에 LinkedList 보다는 ArrayList가 훨씬 빠릅니다. n개의 자료를 저장할 때, ArrayList는 자료들을 하나의 연속적인 묶음으로 묶어 자료를 저장하는 반면, LinkedList는 자료들을 저장 공간에 불연속적인 단위로 저장하게 됩니다. 그렇기 때문에 LinkedList는 메모리 이곳저곳에 산재해 저장되어 있는 노드들을 접근하는데 ArrayList보다는 긴 지연 시간이 소모됩니다. LinkedList의 또 다른 단점은 참조자를 위해 추가적인 메모리를 할당해야 하는 점입니다. 자료들의 크기가 작은 리스트의 경우 참조자를 위한 추가적인 메모리할당은 비실용적일 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;정리&quot;&gt;정리&lt;/h2&gt;
&lt;h2 id=&quot;table&quot;&gt;LinkedList의 장/단점&lt;/h2&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;&lt;center&gt;장점&amp;lt;/th&amp;gt;
&lt;th&gt;&lt;center&gt;단점&amp;lt;/th&amp;gt;
&amp;lt;/tr&amp;gt;
&lt;tr&gt;
&lt;td&gt;자료의 삽입과 삭제가 용이하다.&lt;/td&gt;
&lt;td&gt;포인터의 사용으로 인해 저장 공간의 낭비가 있다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;even&quot;&gt;
&lt;td&gt;리스트 내에서 자료의 이동이 필요하지 않다.&lt;/td&gt;
&lt;td&gt;알고리즘이 복잡하다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;사용 후 기억 장소의 재사용이 가능하다.&lt;/td&gt;
&lt;td&gt;특정 자료의 탐색 시간이 많이 소요된다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;연속적인 기억 장소의 할당이 필요하지 않다.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;

&lt;hr /&gt;
&lt;/center&gt;&lt;/th&gt;&lt;/center&gt;&lt;/th&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</content><author><name>Akas</name></author><category term="DS" /><summary type="html">Array Array(배열)은 논리적 저장 순서와 물리적 저장 순서가 일치한다. 따라서 인덱스(index)를 활용하여, 특정 원소(element)로 접근할 수 있다. 따라서 찾고자 하는 원소의 인덱스 값을 알고 있으면 Big-O(1)에 해당 원소로 접근할 수 있다. 즉, Random Access가 가능하다는 장점이 존재한다.</summary></entry><entry><title type="html">Ensemble</title><link href="/Ensemble" rel="alternate" type="text/html" title="Ensemble" /><published>2019-08-12T10:00:00+00:00</published><updated>2019-08-12T10:00:00+00:00</updated><id>/Ensemble</id><content type="html" xml:base="/Ensemble">&lt;h2 id=&quot;머신러닝-bagging-boosting-stacking&quot;&gt;머신러닝 Bagging, Boosting, Stacking&lt;/h2&gt;
&lt;h1 id=&quot;bagging&quot;&gt;Bagging&lt;/h1&gt;
&lt;p&gt;한글 폰트 체크&lt;/p&gt;

&lt;h1 id=&quot;boosting&quot;&gt;Boosting&lt;/h1&gt;

&lt;h1 id=&quot;stacking&quot;&gt;Stacking&lt;/h1&gt;</content><author><name>Ghost</name></author><category term="ML" /><summary type="html">머신러닝 Bagging, Boosting, Stacking Bagging 한글 폰트 체크</summary></entry><entry><title type="html">Ansible</title><link href="/Ansible" rel="alternate" type="text/html" title="Ansible" /><published>2019-08-02T10:18:00+00:00</published><updated>2019-08-02T10:18:00+00:00</updated><id>/Ansible</id><content type="html" xml:base="/Ansible">&lt;h2 id=&quot;ansible&quot;&gt;Ansible&lt;/h2&gt;
&lt;p&gt;많은 서버들에 동시에 동일한 환경을 배포해야하는 상황에 사용됨.&lt;/p&gt;

&lt;p&gt;Python 기반의 오픈 소스&lt;/p&gt;

&lt;p&gt;멱등성(Idempotency) - 여러번 적용해도 결과는 바뀌지 않음.&lt;/p&gt;

&lt;p&gt;Orchestration.&lt;/p&gt;

&lt;p&gt;불특정하게 서버를 등록할 때, 기능별로…환경별로 사용됨.&lt;/p&gt;</content><author><name>Ghost</name></author><category term="Linux" /><summary type="html">Ansible 많은 서버들에 동시에 동일한 환경을 배포해야하는 상황에 사용됨.</summary></entry><entry><title type="html">호스트(host) 파일 설정</title><link href="/Set-Host_txt" rel="alternate" type="text/html" title="호스트(host) 파일 설정" /><published>2019-07-25T10:18:00+00:00</published><updated>2019-07-25T10:18:00+00:00</updated><id>/Set%20Host_txt</id><content type="html" xml:base="/Set-Host_txt">&lt;h2 id=&quot;hosts-파일-소개&quot;&gt;hosts 파일 소개&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;CentOS 7에서 DNS(Domain Name Server)보다 먼저 IP주소와 Hostname 또는 Domain 명을 Mapping하는 역할을 한다.&lt;/li&gt;
  &lt;li&gt;작은 네트워크에서는 DNS를 대신하도록 설정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hosts-설정&quot;&gt;hosts 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Home 디렉토리에서 작업&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vi /etc/hosts&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Akas</name></author><category term="Linux" /><summary type="html">hosts 파일 소개 CentOS 7에서 DNS(Domain Name Server)보다 먼저 IP주소와 Hostname 또는 Domain 명을 Mapping하는 역할을 한다. 작은 네트워크에서는 DNS를 대신하도록 설정할 수 있다.</summary></entry><entry><title type="html">Break와 Continue의 차이</title><link href="/Break%EC%99%80-Continue%EC%9D%98-%EC%B0%A8%EC%9D%B4" rel="alternate" type="text/html" title="Break와 Continue의 차이" /><published>2019-07-25T10:18:00+00:00</published><updated>2019-07-25T10:18:00+00:00</updated><id>/Break%EC%99%80%20Continue%EC%9D%98%20%EC%B0%A8%EC%9D%B4</id><content type="html" xml:base="/Break%EC%99%80-Continue%EC%9D%98-%EC%B0%A8%EC%9D%B4">&lt;p&gt;C 또는 Java에서 반복문을 탈출하거나, 생략하는 기능이 존재한다.
Break는 반복문을 탈출하며, Continue는 반복문을 생략한 후, 즉 반복문 안에 존재하는 프로그램 내용을 건너 뛰고, 다음 루프로 넘어가는 기능을 한다.&lt;/p&gt;

&lt;h2 id=&quot;continue&quot;&gt;Continue&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;아래의 코드 내용을 실행시키지 않고, 반복문 처음으로 되돌아가, 다음 순차 코드를 실행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;break&quot;&gt;Break&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;반복문과 조건문을 탈출한다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Ghost</name></author><category term="Algorithm" /><summary type="html">C 또는 Java에서 반복문을 탈출하거나, 생략하는 기능이 존재한다. Break는 반복문을 탈출하며, Continue는 반복문을 생략한 후, 즉 반복문 안에 존재하는 프로그램 내용을 건너 뛰고, 다음 루프로 넘어가는 기능을 한다.</summary></entry><entry><title type="html">CentOS 환경에서 포트없이 사용하기.</title><link href="/Linux-Port%EC%97%86%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" rel="alternate" type="text/html" title="CentOS 환경에서 포트없이 사용하기." /><published>2019-07-24T15:00:00+00:00</published><updated>2019-07-24T15:00:00+00:00</updated><id>/Linux%20Port%EC%97%86%EC%9D%B4%20%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0</id><content type="html" xml:base="/Linux-Port%EC%97%86%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0">&lt;p&gt;Port 번호를 생략하여, Linux 명령어를 사용하는 방법을 다룰 것이다.&lt;/p&gt;</content><author><name>Ghost</name></author><category term="Linux" /><summary type="html">Port 번호를 생략하여, Linux 명령어를 사용하는 방법을 다룰 것이다.</summary></entry><entry><title type="html">Jekyll Blog 개설</title><link href="/Blog-%EA%B0%9C%EC%84%A4" rel="alternate" type="text/html" title="Jekyll Blog 개설" /><published>2019-07-22T05:00:00+00:00</published><updated>2019-07-22T05:00:00+00:00</updated><id>/Blog%20%EA%B0%9C%EC%84%A4</id><content type="html" xml:base="/Blog-%EA%B0%9C%EC%84%A4">&lt;p&gt;블로그를 개설하였다.&lt;/p&gt;</content><author><name>Ghost</name></author><category term="Linux" /><summary type="html">블로그를 개설하였다.</summary></entry><entry><title type="html">Welcome to Ghost</title><link href="/welcome" rel="alternate" type="text/html" title="Welcome to Ghost" /><published>2017-07-27T10:00:00+00:00</published><updated>2017-07-27T10:00:00+00:00</updated><id>/welcome</id><content type="html" xml:base="/welcome">&lt;p&gt;Hey! Welcome to Ghost, it’s great to have you :)&lt;/p&gt;

&lt;p&gt;We know that first impressions are important, so we’ve populated your new site with some initial &lt;strong&gt;Getting Started&lt;/strong&gt; posts that will help you get familiar with everything in no time. This is the first one!&lt;/p&gt;

&lt;h3 id=&quot;there-are-a-few-things-that-you-should-know-up-front&quot;&gt;There are a few things that you should know up-front:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That’s who it works best for. If you’re using Ghost for some other purpose, that’s fine too - but it might not be the best choice for you.&lt;/li&gt;
  &lt;li&gt;The entire platform can be modified and customized to suit your needs, which is very powerful, but doing so &lt;strong&gt;does&lt;/strong&gt; require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.&lt;/li&gt;
  &lt;li&gt;For the best experience we recommend downloading the Ghost Desktop App for your computer, which is the best way to access your Ghost site on a desktop device.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our &lt;a href=&quot;https://ghost.org/pricing&quot;&gt;Ghost(Pro)&lt;/a&gt; service, and every penny we make is re-invested into funding further development of free, open source technology for modern journalism.&lt;/p&gt;

&lt;p&gt;The main thing you’ll want to read about next is probably: &lt;a href=&quot;https://demo.ghost.io/the-editor/&quot;&gt;the Ghost editor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you’re done reading, you can simply delete the default &lt;strong&gt;Ghost&lt;/strong&gt; user from your team to remove all of these introductory posts!&lt;/p&gt;</content><author><name>Ghost</name></author><category term="Getting started" /><summary type="html">Hey! Welcome to Ghost, it’s great to have you :)</summary></entry></feed>